// <auto-generated />
using System;
using EFCoreDayTwo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreDayTwo.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreDayTwo.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.ToTable("Department", "HR");
                });

            modelBuilder.Entity("EFCoreDayTwo.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<int?>("SupervisedDepartmentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SupervisedDepartmentID")
                        .IsUnique()
                        .HasFilter("[SupervisedDepartmentID] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EFCoreDayTwo.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EFCoreDayTwo.WorksFor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("WorksFors");
                });

            modelBuilder.Entity("EFCoreDayTwo.Employee", b =>
                {
                    b.HasOne("EFCoreDayTwo.Department", "Dept")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreDayTwo.Department", "SupervisedDept")
                        .WithOne("Supervisor")
                        .HasForeignKey("EFCoreDayTwo.Employee", "SupervisedDepartmentID");

                    b.Navigation("Dept");

                    b.Navigation("SupervisedDept");
                });

            modelBuilder.Entity("EFCoreDayTwo.Project", b =>
                {
                    b.HasOne("EFCoreDayTwo.Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EFCoreDayTwo.WorksFor", b =>
                {
                    b.HasOne("EFCoreDayTwo.Employee", "Emp")
                        .WithMany("WorksFors")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreDayTwo.Project", "Proj")
                        .WithMany("WorksFors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emp");

                    b.Navigation("Proj");
                });

            modelBuilder.Entity("EFCoreDayTwo.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Projects");

                    b.Navigation("Supervisor")
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreDayTwo.Employee", b =>
                {
                    b.Navigation("WorksFors");
                });

            modelBuilder.Entity("EFCoreDayTwo.Project", b =>
                {
                    b.Navigation("WorksFors");
                });
#pragma warning restore 612, 618
        }
    }
}
